{"version":3,"sources":["Components/TodoListHeader.jsx","Components/TodoListTask.jsx","Components/TodoListTasks.jsx","Components/TodoListFooter.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoListHeader","newTaskTitleRef","React","createRef","onAddTaskButtonClick","newText","_this","current","value","props","addTask","render","react_default","a","createElement","className","type","placeholder","ref","onClick","Component","TodoListTask","onIsDoneChanged","e","changeStatus","currentTarget","checked","task","isDone","onChange","title","priority","TodoListTasks","taskElements","tasks","map","t","Components_TodoListTask","TodoListFooter","classForAll","filterValue","classForCompleted","classForActive","changeFilter","App","state","newTask","newTasks","concat","Object","toConsumableArray","setState","newFilterValue","status","tasksCopy","objectSpread2","Components_TodoListHeader","Components_TodoListTasks","filter","Components_TodoListFooter","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22a31383.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass TodoListHeader extends React.Component {\n    newTaskTitleRef = React.createRef()\n\n    onAddTaskButtonClick = () => {\n        let newText = this.newTaskTitleRef.current.value;\n        this.newTaskTitleRef.current.value = \"\";\n        this.props.addTask(newText);\n    }\n    render = () => {\n        return (\n            <div className=\"TodoListHeader\">\n                <div className=\"todoList\">\n\n                    <h3 className=\"todoList-header__title\">What to Learn</h3>\n                    <div className=\"todoList-newTaskForm\">\n                        <input type=\"text\" placeholder=\"New task name\" ref={this.newTaskTitleRef}/>\n                        <button onClick={this.onAddTaskButtonClick}>Add</button>\n                    </div>\n\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListHeader;\n\n","import React from 'react';\nclass TodoListTask extends React.Component {\n\n    onIsDoneChanged  = (e) => {\n       this.props.changeStatus (e.currentTarget.checked, this.props.task)\n    }\n\n\n\n    render = () => {\n        return (\n            <div className=\"todoList-task\">\n                <input type=\"checkbox\" checked={this.props.task.isDone} onChange = {this.onIsDoneChanged}/>\n                <span>{this.props.task.title}</span>\n                <span> priority: {this.props.task.priority} </span>\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let taskElements = this.props.tasks.map((t) => {\n            return <TodoListTask\n                task = {t}\n                // title={t.title}\n                // isDone={t.isDone}\n                // priority={t.priority}\n            changeStatus = {this.props.changeStatus}/>\n        })\n\n\n        return (\n            <div className=\"todoList-tasks\">\n\n                {taskElements}\n\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\n\n\nclass TodoListFooter extends React.Component {\n    render = () => {\n        let classForAll = this.props.filterValue ===\"All\" ? \"filter-active\":\"\";\n        let classForCompleted = this.props.filterValue ===\"Completed\" ? \"filter-active\":\"\";\n        let classForActive = this.props.filterValue ===\"Active\" ? \"filter-active\":\"\";\n        return (\n            <div className=\"TodoListFooter\">\n                <div className=\"todoList-footer\">\n                    <button onClick= {() => {this.props.changeFilter(\"All\")}} className={classForAll}>All</button>\n                    <button onClick= {() => {this.props.changeFilter (\"Completed\")}} className={classForCompleted} >Completed</button>\n                    <button  onClick= { () => {this.props.changeFilter (\"Active\")}} className={classForActive}>Active</button>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListHeader from \"./Components/TodoListHeader\";\nimport TodoListTasks from \"./Components/TodoListTasks\";\nimport TodoListFooter from \"./Components/TodoListFooter\";\n\nclass App extends React.Component {\n\n\n    state = {     tasks : [\n            {title: \"JS\", isDone: true, priority: \"high\"},\n            {title: \"Angular\", isDone: false, priority: \"middle\"},\n            {title: \"HTML\", isDone: true, priority: \"low\"},\n            {title: \"CSS\", isDone: true, priority: \"low\"},\n            {title: \"Java\", isDone: false, priority: \"low\"},\n            {title: \"React\", isDone: false, priority: \"high\"}\n        ],\n    filterValue : \"All\"\n}\naddTask = (newText) => {\n\n        let newTask = {\n    title: newText,\n    isDone: true,\n    priority: \"low\"\n};\n    let newTasks = [...this.state.tasks, newTask]\n    this.setState( {\n        tasks: newTasks\n    })\n\n\n}\nchangeFilter = (newFilterValue) => {\n        this.setState( {filterValue: newFilterValue})\n}\n    changeStatus = (status, task) => {\n        let tasksCopy = this.state.tasks.map (t => {\n            if (t==task) {\n                return {...t, isDone:status}\n            }\n            return t\n        });\n        this.setState( {\n            tasks: tasksCopy\n        })\n\n    }\n    render = () => {\n\n\n        return (\n            <div className=\"App\">\n                        <div className=\"todoList\">\n                            <TodoListHeader addTask = {this.addTask}/>\n                    {/*        <div className=\"todoList-header\">*/}\n                    {/*            <h3 className=\"todoList-header__title\">What to Learn</h3>*/}\n                    {/*            <div className=\"todoList-newTaskForm\">*/}\n                    {/*                <input ref= {this.newTaskTitleRef} type=\"text\" placeholder=\"New task name\"/>*/}\n                    {/*                <button onClick={this.onAddTaskClick}>Add</button>*/}\n                    {/*    </div>*/}\n                    {/*</div>*/}\n\n\n\n                    <TodoListTasks\n                        changeStatus = {this.changeStatus}\n                        tasks={this.state.tasks.filter( (tasks) => {\n                        switch (this.state.filterValue) {\n                            case \"All\":     return true;\n                            case \"Completed\": return tasks.isDone;\n                            case \"Active\": return !tasks.isDone;\n                            default: return true\n                    }\n\n                    })}/>\n                    <TodoListFooter changeFilter = {this.changeFilter} filterValue={this.state.filterValue}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}